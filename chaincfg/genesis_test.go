// Copyright (c) 2014-2016 The btcsuite developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

// TestGenesisBlock tests the genesis block of the main network for validity by
// checking the encoded bytes and hashes.
func TestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

// TestRegTestGenesisBlock tests the genesis block of the regression test
// network for validity by checking the encoded bytes and hashes.
func TestRegTestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

// TestTestNet3GenesisBlock tests the genesis block of the test network (version
// 3) for validity by checking the encoded bytes and hashes.
func TestTestNet3GenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

// TestSimNetGenesisBlock tests the genesis block of the simulation test network
// for validity by checking the encoded bytes and hashes.
func TestSimNetGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := SimNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSimNetGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), simNetGenesisBlockBytes) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(simNetGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := SimNetParams.GenesisBlock.BlockHash()
	if !SimNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SimNetParams.GenesisHash))
	}
}

// TestSigNetGenesisBlock tests the genesis block of the signet test network for
// validity by checking the encoded bytes and hashes.
func TestSigNetGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := SigNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSigNetGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), sigNetGenesisBlockBytes) {
		t.Fatalf("TestSigNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(sigNetGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := SigNetParams.GenesisBlock.BlockHash()
	if !SigNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSigNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SigNetParams.GenesisHash))
	}
}

// genesisBlockBytes are the wire encoded bytes for the genesis block of the
// main network as of protocol version 60002.
var genesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xab, 0x4c, 0x83, 0xb8, /* |.....L..| */
	0xe4, 0x5c, 0x5b, 0xdb, 0x44, 0x23, 0x2f, 0x17, /* |.\[.D#/.| */
	0xea, 0x6a, 0xf5, 0xc0, 0x2e, 0xe0, 0x40, 0x97, /* |.j....@.| */
	0x14, 0xc1, 0xe0, 0x9b, 0xd8, 0xed, 0x12, 0x09, /* |........| */
	0xb7, 0x4c, 0x04, 0xb8, 0x92, 0xee, 0x36, 0x5e, /* |.L....6^| */
	0xff, 0xff, 0x00, 0x1f, 0xf8, 0xf9, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x5a, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |..Z.....| */
	0x01, 0x04, 0x4c, 0x51, 0x54, 0x72, 0x75, 0x73, /* |..LQTrus| */
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x52, 0x65, /* |tless Re| */
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x46, 0x6f, /* |wards Fo| */
	0x72, 0x20, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, /* |r Sustai| */
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, /* |nable En| */
	0x65, 0x72, 0x67, 0x79, 0x20, 0x41, 0x64, 0x6f, /* |ergy Ado| */
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, /* |ption - | */
	0x55, 0x4e, 0x20, 0x53, 0x44, 0x47, 0x73, 0x20, /* |UN SDGs | */
	0x37, 0x20, 0x39, 0x20, 0x31, 0x31, 0x20, 0x31, /* |7 9 11 1| */
	0x33, 0x20, 0x2c, 0x20, 0x32, 0x2f, 0x30, 0x32, /* |3 , 2/02| */
	0x2f, 0x32, 0x30, 0x32, 0x30, 0xff, 0xff, 0xff, /* |/2020...| */
	0xff, 0x01, 0x00, 0xc8, 0x17, 0xa8, 0x04, 0x00, /* |........| */
	0x00, 0x00, 0x43, 0x41, 0x04, 0xf9, 0x22, 0x79,	/* |..CA.."y| */
	0x3e, 0x1e, 0x9f, 0xd9, 0x53, 0x40, 0x3b, 0x47, /* |>...S@;G| */
	0x5b, 0xbf, 0xe8, 0xea, 0x32, 0x16, 0xb8, 0xb7, /* |[...2...| */
	0x08, 0x16, 0x68, 0x53, 0xc0, 0x2f, 0x3f, 0x6b, /* |..hS./?k| */
	0x95, 0x23, 0x2c, 0xf9, 0xe3, 0x6b, 0xcc, 0x29, /* |.#,..k.)| */
	0x91, 0xdb, 0xef, 0x13, 0x88, 0xf4, 0x2b, 0x5a, /* |......+Z| */
	0x72, 0x70, 0x0e, 0xc8, 0x37, 0x6a, 0x79, 0xee, /* |rp..7jy.| */
	0x4f, 0xfc, 0x00, 0x23, 0x55, 0xee, 0x39, 0x0d, /* |O..#U.9.| */
	0x19, 0x2b, 0x27, 0xc9, 0x71, 0xac, 0x00, 0x00, /* |.+'.q...| */
	0x00, 0x00,                                     /* |..| */
}

// regTestGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the regression test network as of protocol version 60002.
var regTestGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xab, 0x4c, 0x83, 0xb8, /* |.....L..| */
	0xe4, 0x5c, 0x5b, 0xdb, 0x44, 0x23, 0x2f, 0x17, /* |.\[.D#/.| */
	0xea, 0x6a, 0xf5, 0xc0, 0x2e, 0xe0, 0x40, 0x97, /* |.j....@.| */
	0x14, 0xc1, 0xe0, 0x9b, 0xd8, 0xed, 0x12, 0x09, /* |........| */
	0xb7, 0x4c, 0x04, 0xb8, 0x92, 0xee, 0x36, 0x5e, /* |.L....6^| */
	0xff, 0xff, 0x00, 0x1f, 0xf8, 0xf9, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x5a, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |..Z.....| */
	0x01, 0x04, 0x4c, 0x51, 0x54, 0x72, 0x75, 0x73, /* |..LQTrus| */
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x52, 0x65, /* |tless Re| */
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x46, 0x6f, /* |wards Fo| */
	0x72, 0x20, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, /* |r Sustai| */
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, /* |nable En| */
	0x65, 0x72, 0x67, 0x79, 0x20, 0x41, 0x64, 0x6f, /* |ergy Ado| */
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, /* |ption - | */
	0x55, 0x4e, 0x20, 0x53, 0x44, 0x47, 0x73, 0x20, /* |UN SDGs | */
	0x37, 0x20, 0x39, 0x20, 0x31, 0x31, 0x20, 0x31, /* |7 9 11 1| */
	0x33, 0x20, 0x2c, 0x20, 0x32, 0x2f, 0x30, 0x32, /* |3 , 2/02| */
	0x2f, 0x32, 0x30, 0x32, 0x30, 0xff, 0xff, 0xff, /* |/2020...| */
	0xff, 0x01, 0x00, 0xc8, 0x17, 0xa8, 0x04, 0x00, /* |........| */
	0x00, 0x00, 0x43, 0x41, 0x04, 0xf9, 0x22, 0x79,	/* |..CA.."y| */
	0x3e, 0x1e, 0x9f, 0xd9, 0x53, 0x40, 0x3b, 0x47, /* |>...S@;G| */
	0x5b, 0xbf, 0xe8, 0xea, 0x32, 0x16, 0xb8, 0xb7, /* |[...2...| */
	0x08, 0x16, 0x68, 0x53, 0xc0, 0x2f, 0x3f, 0x6b, /* |..hS./?k| */
	0x95, 0x23, 0x2c, 0xf9, 0xe3, 0x6b, 0xcc, 0x29, /* |.#,..k.)| */
	0x91, 0xdb, 0xef, 0x13, 0x88, 0xf4, 0x2b, 0x5a, /* |......+Z| */
	0x72, 0x70, 0x0e, 0xc8, 0x37, 0x6a, 0x79, 0xee, /* |rp..7jy.| */
	0x4f, 0xfc, 0x00, 0x23, 0x55, 0xee, 0x39, 0x0d, /* |O..#U.9.| */
	0x19, 0x2b, 0x27, 0xc9, 0x71, 0xac, 0x00, 0x00, /* |.+'.q...| */
	0x00, 0x00,                                     /* |..| */

}

// testNet3GenesisBlockBytes are the wire encoded bytes for the genesis block of
// the test network (version 3) as of protocol version 60002.
var testNet3GenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xab, 0x4c, 0x83, 0xb8, /* |.....L..| */
	0xe4, 0x5c, 0x5b, 0xdb, 0x44, 0x23, 0x2f, 0x17, /* |.\[.D#/.| */
	0xea, 0x6a, 0xf5, 0xc0, 0x2e, 0xe0, 0x40, 0x97, /* |.j....@.| */
	0x14, 0xc1, 0xe0, 0x9b, 0xd8, 0xed, 0x12, 0x09, /* |........| */
	0xb7, 0x4c, 0x04, 0xb8, 0x92, 0xee, 0x36, 0x5e, /* |.L....6^| */
	0xff, 0xff, 0x00, 0x1f, 0xf8, 0xf9, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x5a, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |..Z.....| */
	0x01, 0x04, 0x4c, 0x51, 0x54, 0x72, 0x75, 0x73, /* |..LQTrus| */
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x52, 0x65, /* |tless Re| */
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x46, 0x6f, /* |wards Fo| */
	0x72, 0x20, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, /* |r Sustai| */
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, /* |nable En| */
	0x65, 0x72, 0x67, 0x79, 0x20, 0x41, 0x64, 0x6f, /* |ergy Ado| */
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, /* |ption - | */
	0x55, 0x4e, 0x20, 0x53, 0x44, 0x47, 0x73, 0x20, /* |UN SDGs | */
	0x37, 0x20, 0x39, 0x20, 0x31, 0x31, 0x20, 0x31, /* |7 9 11 1| */
	0x33, 0x20, 0x2c, 0x20, 0x32, 0x2f, 0x30, 0x32, /* |3 , 2/02| */
	0x2f, 0x32, 0x30, 0x32, 0x30, 0xff, 0xff, 0xff, /* |/2020...| */
	0xff, 0x01, 0x00, 0xc8, 0x17, 0xa8, 0x04, 0x00, /* |........| */
	0x00, 0x00, 0x43, 0x41, 0x04, 0xf9, 0x22, 0x79,	/* |..CA.."y| */
	0x3e, 0x1e, 0x9f, 0xd9, 0x53, 0x40, 0x3b, 0x47, /* |>...S@;G| */
	0x5b, 0xbf, 0xe8, 0xea, 0x32, 0x16, 0xb8, 0xb7, /* |[...2...| */
	0x08, 0x16, 0x68, 0x53, 0xc0, 0x2f, 0x3f, 0x6b, /* |..hS./?k| */
	0x95, 0x23, 0x2c, 0xf9, 0xe3, 0x6b, 0xcc, 0x29, /* |.#,..k.)| */
	0x91, 0xdb, 0xef, 0x13, 0x88, 0xf4, 0x2b, 0x5a, /* |......+Z| */
	0x72, 0x70, 0x0e, 0xc8, 0x37, 0x6a, 0x79, 0xee, /* |rp..7jy.| */
	0x4f, 0xfc, 0x00, 0x23, 0x55, 0xee, 0x39, 0x0d, /* |O..#U.9.| */
	0x19, 0x2b, 0x27, 0xc9, 0x71, 0xac, 0x00, 0x00, /* |.+'.q...| */
	0x00, 0x00,                                     /* |..| */

}

// simNetGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the simulation test network as of protocol version 70002.
var simNetGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xab, 0x4c, 0x83, 0xb8, /* |.....L..| */
	0xe4, 0x5c, 0x5b, 0xdb, 0x44, 0x23, 0x2f, 0x17, /* |.\[.D#/.| */
	0xea, 0x6a, 0xf5, 0xc0, 0x2e, 0xe0, 0x40, 0x97, /* |.j....@.| */
	0x14, 0xc1, 0xe0, 0x9b, 0xd8, 0xed, 0x12, 0x09, /* |........| */
	0xb7, 0x4c, 0x04, 0xb8, 0x92, 0xee, 0x36, 0x5e, /* |.L....6^| */
	0xff, 0xff, 0x00, 0x1f, 0xf8, 0xf9, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x5a, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |..Z.....| */
	0x01, 0x04, 0x4c, 0x51, 0x54, 0x72, 0x75, 0x73, /* |..LQTrus| */
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x52, 0x65, /* |tless Re| */
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x46, 0x6f, /* |wards Fo| */
	0x72, 0x20, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, /* |r Sustai| */
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, /* |nable En| */
	0x65, 0x72, 0x67, 0x79, 0x20, 0x41, 0x64, 0x6f, /* |ergy Ado| */
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, /* |ption - | */
	0x55, 0x4e, 0x20, 0x53, 0x44, 0x47, 0x73, 0x20, /* |UN SDGs | */
	0x37, 0x20, 0x39, 0x20, 0x31, 0x31, 0x20, 0x31, /* |7 9 11 1| */
	0x33, 0x20, 0x2c, 0x20, 0x32, 0x2f, 0x30, 0x32, /* |3 , 2/02| */
	0x2f, 0x32, 0x30, 0x32, 0x30, 0xff, 0xff, 0xff, /* |/2020...| */
	0xff, 0x01, 0x00, 0xc8, 0x17, 0xa8, 0x04, 0x00, /* |........| */
	0x00, 0x00, 0x43, 0x41, 0x04, 0xf9, 0x22, 0x79,	/* |..CA.."y| */
	0x3e, 0x1e, 0x9f, 0xd9, 0x53, 0x40, 0x3b, 0x47, /* |>...S@;G| */
	0x5b, 0xbf, 0xe8, 0xea, 0x32, 0x16, 0xb8, 0xb7, /* |[...2...| */
	0x08, 0x16, 0x68, 0x53, 0xc0, 0x2f, 0x3f, 0x6b, /* |..hS./?k| */
	0x95, 0x23, 0x2c, 0xf9, 0xe3, 0x6b, 0xcc, 0x29, /* |.#,..k.)| */
	0x91, 0xdb, 0xef, 0x13, 0x88, 0xf4, 0x2b, 0x5a, /* |......+Z| */
	0x72, 0x70, 0x0e, 0xc8, 0x37, 0x6a, 0x79, 0xee, /* |rp..7jy.| */
	0x4f, 0xfc, 0x00, 0x23, 0x55, 0xee, 0x39, 0x0d, /* |O..#U.9.| */
	0x19, 0x2b, 0x27, 0xc9, 0x71, 0xac, 0x00, 0x00, /* |.+'.q...| */
	0x00, 0x00,                                     /* |..| */

}

// sigNetGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the signet test network as of protocol version 70002.
var sigNetGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xab, 0x4c, 0x83, 0xb8, /* |.....L..| */
	0xe4, 0x5c, 0x5b, 0xdb, 0x44, 0x23, 0x2f, 0x17, /* |.\[.D#/.| */
	0xea, 0x6a, 0xf5, 0xc0, 0x2e, 0xe0, 0x40, 0x97, /* |.j....@.| */
	0x14, 0xc1, 0xe0, 0x9b, 0xd8, 0xed, 0x12, 0x09, /* |........| */
	0xb7, 0x4c, 0x04, 0xb8, 0x92, 0xee, 0x36, 0x5e, /* |.L....6^| */
	0xff, 0xff, 0x00, 0x1f, 0xf8, 0xf9, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x5a, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |..Z.....| */
	0x01, 0x04, 0x4c, 0x51, 0x54, 0x72, 0x75, 0x73, /* |..LQTrus| */
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x52, 0x65, /* |tless Re| */
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x46, 0x6f, /* |wards Fo| */
	0x72, 0x20, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, /* |r Sustai| */
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x45, 0x6e, /* |nable En| */
	0x65, 0x72, 0x67, 0x79, 0x20, 0x41, 0x64, 0x6f, /* |ergy Ado| */
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, /* |ption - | */
	0x55, 0x4e, 0x20, 0x53, 0x44, 0x47, 0x73, 0x20, /* |UN SDGs | */
	0x37, 0x20, 0x39, 0x20, 0x31, 0x31, 0x20, 0x31, /* |7 9 11 1| */
	0x33, 0x20, 0x2c, 0x20, 0x32, 0x2f, 0x30, 0x32, /* |3 , 2/02| */
	0x2f, 0x32, 0x30, 0x32, 0x30, 0xff, 0xff, 0xff, /* |/2020...| */
	0xff, 0x01, 0x00, 0xc8, 0x17, 0xa8, 0x04, 0x00, /* |........| */
	0x00, 0x00, 0x43, 0x41, 0x04, 0xf9, 0x22, 0x79,	/* |..CA.."y| */
	0x3e, 0x1e, 0x9f, 0xd9, 0x53, 0x40, 0x3b, 0x47, /* |>...S@;G| */
	0x5b, 0xbf, 0xe8, 0xea, 0x32, 0x16, 0xb8, 0xb7, /* |[...2...| */
	0x08, 0x16, 0x68, 0x53, 0xc0, 0x2f, 0x3f, 0x6b, /* |..hS./?k| */
	0x95, 0x23, 0x2c, 0xf9, 0xe3, 0x6b, 0xcc, 0x29, /* |.#,..k.)| */
	0x91, 0xdb, 0xef, 0x13, 0x88, 0xf4, 0x2b, 0x5a, /* |......+Z| */
	0x72, 0x70, 0x0e, 0xc8, 0x37, 0x6a, 0x79, 0xee, /* |rp..7jy.| */
	0x4f, 0xfc, 0x00, 0x23, 0x55, 0xee, 0x39, 0x0d, /* |O..#U.9.| */
	0x19, 0x2b, 0x27, 0xc9, 0x71, 0xac, 0x00, 0x00, /* |.+'.q...| */
	0x00, 0x00,                                     /* |..| */

}
